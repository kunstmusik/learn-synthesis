{"version":3,"sources":["Additive/index.jsx","Additive/additive.orc","SpectralAnalyzer/index.js","Subtractive/index.jsx","Subtractive/subtractive.orc","AMRM/index.jsx","AMRM/amrm.orc","FM/index.jsx","FM/fm.orc","Main/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Slider","csound","sliderNum","useState","db","setdb","amp","Math","exp","log","dbToAmp","sliderChan","setControlChannel","key","className","type","min","max","value","onInput","evt","val","target","onDoubleClick","Sliders","csSlider","curry","sliders","map","range","Buttons","onClick","readScore","Additive","started","setStarted","useEffect","reset","compileOrc","start","audioContext","resume","SpectralAnalyzer","canvasRef","useRef","scopeNode","current","canvas","ctx","getContext","node","getNode","context","createAnalyser","fftSize","connect","mags","displayWidth","clientWidth","displayHeight","clientHeight","width","height","resize","freqData","Uint8Array","frequencyBinCount","scaleY","scaleLinear","domain","getByteFrequencyData","clearRect","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","x","indx","floor","lineTo","stroke","requestAnimationFrame","connectVisualizer","disconnect","disconnectVisualizer","ref","style","display","SourcePanel","for","id","name","onChange","FilterPanel","freq","setFreq","Q","setQ","margin","PlayButtons","marginTop","evaluateCode","Subtractive","modalOpen","setModalOpen","icon","faInfoCircle","isOpen","contentLabel","overlay","background","content","color","setOption","waveForm","setWaveForm","htmlFor","HSlider","sliderLabel","valLabel","defaultValue","setVal","step","gridColumn","gridRow","ModulatorPanel","enabled","setEnabled","setAmp","offset","setOffset","checked","marginBottom","AMRM","InfoPanel","SimpleFMPanelPanel","carRatio","setCarRatio","modRatio","setModRatio","index","setIndex","FM","src","alt","href","Main","Navigation","to","App","setCsound","CsoundObj","initialize","then","cs","path","Boolean","window","location","hostname","match","Modal","setAppElement","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uYAUMA,G,MAAS,SAACC,EAAQC,GAAe,IAAD,EACdC,oBAAU,IADI,mBAC3BC,EAD2B,KACvBC,EADuB,KAG5BC,EAPM,SAACF,GACb,OAAOA,IAAO,GAAK,EAAIG,KAAKC,IAAKJ,EAAKG,KAAKE,IAAI,IAAO,IAM1CC,CAAQN,GACdO,EAAU,cAAUT,GAG1B,OADAD,EAAOW,kBAAkBD,EAAYL,GAEjC,yBAAKO,IAAKF,EAAYG,UAAU,aAE5B,yBAAKA,UAAU,eAAf,mBAA0CZ,IAC1C,2BACIa,KAAK,QACLC,IAAI,MACJC,IAAI,IACJC,MAAOd,EACPe,QAAS,SAACC,GACN,IAAMC,EAAMD,EAAIE,OAAOJ,MACvBb,EAAMgB,IAEVE,cAAe,SAACH,GACZf,GAAO,OAGf,yBAAKS,UAAU,eAAeV,MAKpCoB,EAAU,SAAC,GAAgB,IAAdvB,EAAa,EAAbA,OACTwB,EAAWC,YAAM1B,EAAN0B,CAAczB,GACzB0B,EAAUC,YAAIH,EAAUI,YAAM,EAAG,KACvC,OAAO,6BAAMF,IAGXG,EAAU,SAAC,GAAgB,IAAd7B,EAAa,EAAbA,OACf,OACI,yBAAKa,UAAU,aACX,4BAAQiB,QAAS,kBAAM9B,EAAO+B,UAAU,eAAxC,MACA,4BAAQD,QAAS,kBAAM9B,EAAO+B,UAAU,eAAxC,OACA,4BAAQD,QAAS,kBAAM9B,EAAO+B,UAAU,aAAxC,aAyCGC,EApCE,SAAC,GAAgB,IAAdhC,EAAa,EAAbA,OAAa,EACCE,oBAAS,GADV,mBACtB+B,EADsB,KACbC,EADa,KAgB7B,OANAC,qBAAU,WACN,OAAO,WACHnC,EAAOoC,WAEZ,CAACpC,IAGA,yBAAKa,UAAU,aACX,kDACCoB,EACG,oCACI,kBAAC,EAAD,CAASjC,OAAQA,IACjB,kBAAC,EAAD,CAASA,OAAQA,IACjB,6BACI,4BACI,yEAKZ,4BAAQ8B,QA3BA,WAChB9B,EAAOqC,WC3DA,6gCD4DPrC,EAAOsC,QACPtC,EAAOuC,aAAaC,SACpBN,GAAW,KAuBH,mB,QEpEhB,IAuFeO,EAxBiB,SAAC,GAAc,IAAbzC,EAAY,EAAZA,OACxB0C,EAAYC,mBAelB,OAbAR,qBAAU,WACN,IAAIS,EAAY,KAKhB,OAJI5C,GAAU0C,EAAUG,UACpBD,EArEc,SAAC5C,EAAQ0C,GAC/B,GAAKA,GAAcA,EAAUG,QAEtB,CACH,IAAMC,EAASJ,EAAUG,QAEnBE,EAAMD,EAAOE,WAAW,MAE9B,GAAW,MAAPD,EACA,OAAO,KAKX,IAAME,EAAOjD,EAAOkD,UAEdN,EADUK,EAAKE,QACKC,iBAC1BR,EAAUS,QAAU,KACpBJ,EAAKK,QAAQV,GAkCb,OAhCa,SAAPW,KAjCd,SAAgBT,GAEZ,IAAIU,EAAeV,EAAOW,YACtBC,EAAgBZ,EAAOa,aAGvBb,EAAOc,QAAUJ,GAAgBV,EAAOe,SAAWH,IAEnDZ,EAAOc,MAAQJ,EACfV,EAAOe,OAASH,GAyBZI,CAAOhB,GACP,IAAMc,EAAQd,EAAOc,MACfC,EAASf,EAAOe,OAClBE,EAAW,IAAIC,WAAWpB,EAAUqB,mBAElCC,EAASC,cACEC,OAAO,CAAC,EAAG,MACXxC,MAAM,CAACiC,EAAQ,IAEhCjB,EAAUyB,qBAAqBN,GAE/BhB,EAAIuB,UAAU,EAAG,EAAGV,EAAOC,GAE3Bd,EAAIwB,UAAY,sBAChBxB,EAAIyB,SAAS,EAAG,EAAGZ,EAAOC,GAC1Bd,EAAI0B,UAAY,EAChB1B,EAAI2B,YAAc,kBAClB3B,EAAI4B,YAEJ,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAOgB,IAAK,CAC5B,IAAIC,EAAOvE,KAAKwE,MACXF,EAAIhB,EAAShB,EAAUqB,mBAE5BlB,EAAIgC,OAAOH,EAAGV,EAAOH,EAASc,KAGlC9B,EAAIiC,SACJC,sBAAsB1B,GAE1BA,GAEOX,EAlDP,OAAO,KAmESsC,CAAkBlF,EAAQ0C,IAGnC,WACC1C,GAAU4C,GAjBG,SAAC5C,EAAQ4C,GACrB5C,EAAOkD,UACfiC,WAAWvC,GAgBJwC,CAAqBpF,EAAQ4C,MAGtC,CAACF,EAAW1C,IAGX,4BACIqF,IAAK3C,EACL4C,MAAO,CAAE1B,MAAO,OAAQC,OAAQ,OAAQ0B,QAAS,Y,gCC1FvDC,G,MAAc,SAAC,GAAgB,IAAdxF,EAAa,EAAbA,OACnB,OACI,yBAAKa,UAAU,aACX,sCACA,2BAAO4E,IAAI,YAAX,sBACA,4BACIC,GAAG,WACHC,KAAK,WACLC,SAAU,SAACzE,GACPnB,EAAOW,kBAAkB,WAAYQ,EAAIE,OAAOJ,SAGpD,4BAAQA,MAAM,KAAd,kBACA,4BAAQA,MAAM,MAAd,8BACA,4BAAQA,MAAM,MAAd,oCACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,iDAGA,4BAAQA,MAAM,MAAd,eACA,4BAAQA,MAAM,MAAd,kBAMV4E,EAAc,SAAC,GAAgB,IAAd7F,EAAa,EAAbA,OAAa,EACRE,mBAAS,KADD,mBACzB4F,EADyB,KACnBC,EADmB,OAEd7F,mBAAS,IAFK,mBAEzB8F,EAFyB,KAEtBC,EAFsB,KAMhC,OAFAjG,EAAOW,kBAAkB,eAAgBmF,GACzC9F,EAAOW,kBAAkB,UAAWqF,GAEhC,yBAAKnF,UAAU,aACX,sCAEA,2BAAO4E,IAAI,cAAX,gBACA,4BACIC,GAAG,aACHC,KAAK,aACLC,SAAU,SAACzE,GACPnB,EAAOW,kBAAkB,aAAcQ,EAAIE,OAAOJ,SAGtD,4BAAQA,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,gCACA,4BAAQA,MAAM,KAAd,iCACA,4BAAQA,MAAM,KAAd,iCACA,4BAAQA,MAAM,KAAd,2CAGA,4BAAQA,MAAM,KAAd,iCAGJ,2BACIH,KAAK,QACLC,IAAI,KACJC,IAAI,QACJC,MAAO6E,EACP5E,QAAS,SAACC,GACN,IAAMC,EAAMD,EAAIE,OAAOJ,MACvB8E,EAAQ3E,IAEZE,cAAe,SAACH,GACZ4E,EAAQ,QAGhB,yBAAKT,MAAO,CAAEY,OAAQ,SAAWJ,EAAjC,OAEA,2BACIhF,KAAK,QACLC,IAAI,MACJC,IAAI,KACJC,MAAO+E,EACP9E,QAAS,SAACC,GACN,IAAMC,EAAMD,EAAIE,OAAOJ,MACvBgF,EAAK7E,IAETE,cAAe,SAACH,GACZ8E,EAAK,OAGb,yBAAKX,MAAO,CAAEY,OAAQ,SAAWF,EAAjC,QAKNG,EAAc,SAAC,GAAgB,IAAdnG,EAAa,EAAbA,OACnB,OACI,yBAAKa,UAAU,YAAYyE,MAAO,CAAEc,UAAW,SAC3C,4BACItE,QAAS,kBACL9B,EAAOqG,aAAa,sCAF5B,MAOA,4BACIvE,QAAS,kBACL9B,EAAOqG,aAAa,sCAF5B,MAOA,4BACIvE,QAAS,kBACL9B,EAAOqG,aAAa,sCAF5B,MAOA,4BACIvE,QAAS,WACL9B,EAAOW,kBAAkB,MAAO,GAChCX,EAAO+B,UAAU,YAHzB,kBAQA,4BAAQD,QAAS,kBAAM9B,EAAOW,kBAAkB,MAAO,KAAvD,mBA2EG2F,EApEK,SAAC,GAAgB,IAAdtG,EAAa,EAAbA,OAAa,EACFE,oBAAS,GADP,mBACzB+B,EADyB,KAChBC,EADgB,OAEEhC,oBAAS,GAFX,mBAEzBqG,EAFyB,KAEdC,EAFc,KAYhCrE,qBAAU,WACN,OAAO,WACHnC,EAAOoC,WAEZ,CAACpC,IAWJ,OACI,yBAAKa,UAAU,aACX,oDAC0B,IACtB,kBAAC,IAAD,CACIiB,QAAS,kBAAM0E,GAAa,IAC5BC,KAAMC,OAGd,kBAAC,IAAD,CACIC,OAAQJ,EACRK,aAAa,wBACbtB,MArBA,CACRuB,QAAS,CAAEC,WAAY,aACvBC,QAAS,CAAED,WAAY,UAAWE,MAAO,UAqB7B,sDACA,yBAAK1B,MAAO,CAACY,OAAQ,KAAK,6DAC1B,4BACIrF,UAAU,cACViB,QAAS,kBAAM0E,GAAa,KAFhC,UAOPvE,EACG,oCACI,yBAAKpB,UAAU,WACX,kBAAC,EAAD,CAAab,OAAQA,IACrB,kBAAC,EAAD,CAAaA,OAAQA,KAEzB,kBAAC,EAAD,CAAaA,OAAQA,IACrB,yBAAKsF,MAAO,CAAEzB,OAAQ,UAClB,kBAAC,EAAD,CAAkB7D,OAAQA,MAIlC,4BAAQ8B,QA1DA,WAChB9B,EAAOiH,UAAU,qBACjBjH,EAAOqC,WC7IA,6hDD8IPrC,EAAOsC,QACPtC,EAAOuC,aAAaC,SACpBN,GAAW,KAqDH,mBE5LVsD,G,MAAc,SAAC,GAAgB,IAAdxF,EAAa,EAAbA,OAAa,EACAE,oBAAU,GADV,mBACzBgH,EADyB,KACfC,EADe,KAKhC,OAFAnH,EAAOW,kBAAkB,WAAYuG,GAGjC,yBAAKrG,UAAU,aACX,uCACA,2BAAOuG,QAAQ,YAAf,sBACA,4BACI1B,GAAG,WACHC,KAAK,WACLC,SAAU,SAACzE,GACPgG,EAAYhG,EAAIE,OAAOJ,SAG3B,4BAAQA,MAAM,MAAd,QACA,4BAAQA,MAAM,KAAd,kBACA,4BAAQA,MAAM,MAAd,8BACA,4BAAQA,MAAM,MAAd,wCAMVoG,EAAU,SAAC,GASV,IARH3B,EAQE,EARFA,GACA4B,EAOE,EAPFA,YACAC,EAME,EANFA,SACAC,EAKE,EALFA,aACApG,EAIE,EAJFA,IACAqG,EAGE,EAHFA,OACA1G,EAEE,EAFFA,IACAC,EACE,EADFA,IAEA,OACI,yBAAKH,UAAU,WACX,2BAAOuG,QAAS1B,GAAK4B,GACrB,2BACI5B,GAAIA,EACJ5E,KAAK,QACLC,IAAKA,EACLC,IAAKA,EACL0G,KAAK,OACLF,aAAcpG,EACdF,QAAS,SAACC,GACN,IAAMC,EAAMD,EAAIE,OAAOJ,MACvBwG,EAAOrG,IAEXE,cAAe,SAACH,GACZsG,EAAOD,MAGf,yBAAKlC,MAAO,CAAEY,OAAQ,OAAQyB,WAAY,EAAGC,QAAS,IACjDxG,EADL,IACWmG,KAMjBM,EAAiB,SAAC,GAAgB,IAAd7H,EAAa,EAAbA,OAAa,EACLE,oBAAS,GADJ,mBAC5B4H,EAD4B,KACnBC,EADmB,OAEX7H,mBAAS,KAFE,mBAE5B4F,EAF4B,KAEtBC,EAFsB,OAGb7F,mBAAS,GAHI,mBAG5BG,EAH4B,KAGvB2H,EAHuB,OAIP9H,mBAAS,GAJF,mBAI5B+H,EAJ4B,KAIpBC,EAJoB,KAWnC,OALAlI,EAAOW,kBAAkB,aAAcmH,EAAU,EAAI,GACrD9H,EAAOW,kBAAkB,UAAWmF,GACpC9F,EAAOW,kBAAkB,SAAUN,GACnCL,EAAOW,kBAAkB,YAAasH,GAGlC,yBAAKpH,UAAU,aACX,yCAEA,2BACI6E,GAAG,kBACH5E,KAAK,WACLqH,QAASL,EACTlC,SAAU,SAACzE,GAAD,OAAS4G,GAAYD,MAEnC,2BAAOV,QAAQ,mBAAf,qBAEA,kBAAC,EAAD,CACI1B,GAAG,aACH4B,YAAY,YACZvG,IAAK,IACLC,IAAK,IACLwG,aAAc,IACdD,SAAS,KACTnG,IAAK0E,EACL2B,OAAQ1B,IAGZ,kBAAC,EAAD,CACIL,GAAG,YACH4B,YAAY,YACZvG,IAAK,EACLC,IAAK,EACLwG,aAAc,EACdpG,IAAKf,EACLoH,OAAQO,IAGZ,kBAAC,EAAD,CACItC,GAAG,eACH4B,YAAY,YACZvG,IAAK,EACLC,IAAK,EACLwG,aAAc,EACdpG,IAAK6G,EACLR,OAAQS,MAMlB/B,EAAc,SAAC,GAAgB,IAAdnG,EAAa,EAAbA,OACnB,OACI,yBACIa,UAAU,YACVyE,MAAO,CAAEc,UAAW,OAAQgC,aAAc,SAE1C,4BACItG,QAAS,kBACL9B,EAAOqG,aAAa,wCAF5B,QAOA,4BACIvE,QAAS,WACL9B,EAAOW,kBAAkB,MAAO,GAChCX,EAAO+B,UAAU,YAHzB,kBAQA,4BAAQD,QAAS,kBAAM9B,EAAOW,kBAAkB,MAAO,KAAvD,mBA+EG0H,EAxEF,SAAC,GAAgB,IAAdrI,EAAa,EAAbA,OAAa,EACKE,oBAAS,GADd,mBAClB+B,EADkB,KACTC,EADS,OAEShC,oBAAS,GAFlB,mBAElBqG,EAFkB,KAEPC,EAFO,KAYzBrE,qBAAU,WACN,OAAO,WACHnC,EAAOoC,WAEZ,CAACpC,IAaJ,OACI,yBAAKa,UAAU,aACX,wDAC8B,IAC1B,kBAAC,IAAD,CACIiB,QAAS,kBAAM0E,GAAa,IAC5BC,KAAMC,OAGd,kBAAC,IAAD,CACIC,OAAQJ,EACRK,aAAa,4BACbtB,MAvBA,CACRuB,QAAS,CAAEC,WAAY,aACvBC,QAAS,CACLD,WAAY,UACZE,MAAO,UAqBH,0DACA,yBAAK1B,MAAO,CAAEY,OAAQ,KAClB,6DAEJ,4BACIrF,UAAU,cACViB,QAAS,kBAAM0E,GAAa,KAFhC,UAOHvE,EACG,oCACI,yBAAKpB,UAAU,WACX,kBAAC,EAAD,CAAgBb,OAAQA,IACxB,kBAAC,EAAD,CAAaA,OAAQA,KAEzB,kBAAC,EAAD,CAAaA,OAAQA,IACrB,yBAAKsF,MAAO,CAAEzB,OAAQ,UAClB,kBAAC,EAAD,CAAkB7D,OAAQA,MAIlC,4BAAQ8B,QA9DA,WAChB9B,EAAOiH,UAAU,qBACjBjH,EAAOqC,WChKA,88BDiKPrC,EAAOsC,QACPtC,EAAOuC,aAAaC,SACpBN,GAAW,KAyDH,mBEnNVoG,G,MAAY,SAAC,GAAe,EAAbtI,OACjB,OACI,yBAAKa,UAAU,aACX,qCAEA,kHACA,8GAMNwG,EAAU,SAAC,GAUV,IATH3B,EASE,EATFA,GACA4B,EAQE,EARFA,YACAC,EAOE,EAPFA,SACAC,EAME,EANFA,aACApG,EAKE,EALFA,IACAqG,EAIE,EAJFA,OACA1G,EAGE,EAHFA,IACAC,EAEE,EAFFA,IAEE,IADF0G,YACE,MADG,IACH,EACF,OACI,yBAAK7G,UAAU,WACX,2BAAOuG,QAAS1B,GAAK4B,GACrB,2BACI5B,GAAIA,EACJ5E,KAAK,QACLC,IAAKA,EACLC,IAAKA,EACL0G,KAAMA,EACNF,aAAcpG,EACdF,QAAS,SAACC,GACN,IAAMC,EAAMD,EAAIE,OAAOJ,MACvBwG,EAAOrG,IAEXE,cAAe,SAACH,GACZsG,EAAOD,MAGf,yBAAKlC,MAAO,CAAEY,OAAQ,OAAQyB,WAAY,EAAGC,QAAS,IACjDxG,EADL,IACWmG,KAMjBgB,EAAqB,SAAC,GAAgB,IAAdvI,EAAa,EAAbA,OAAa,EAEPE,mBAAS,GAFF,mBAEhCsI,EAFgC,KAEtBC,EAFsB,OAGPvI,mBAAS,GAHF,mBAGhCwI,EAHgC,KAGtBC,EAHsB,OAIbzI,mBAAS,GAJI,mBAIhC0I,EAJgC,KAIzBC,EAJyB,KASvC,OAHA7I,EAAOW,kBAAkB,WAAY+H,EAAWF,GAChDxI,EAAOW,kBAAkB,QAASiI,GAG9B,yBAAK/H,UAAU,aACX,yCAEA,kBAAC,EAAD,CACI6E,GAAG,iBACH4B,YAAY,kBACZvG,IAAK,EACLC,IAAK,EACL0G,KAAM,GACNF,aAAc,EACdpG,IAAKsH,EACLjB,OAAQkB,IAGZ,kBAAC,EAAD,CACIjD,GAAG,iBACH4B,YAAY,gBACZvG,IAAK,EACLC,IAAK,EACLwG,aAAc,EACdE,KAAM,GACNtG,IAAKoH,EACLf,OAAQgB,IAIZ,kBAAC,EAAD,CACI/C,GAAG,cACH4B,YAAY,QACZvG,IAAK,EACLC,IAAK,GACL0G,KAAM,IACNF,aAAc,EACdpG,IAAKwH,EACLnB,OAAQoB,MAMlB1C,EAAc,SAAC,GAAgB,IAAdnG,EAAa,EAAbA,OACnB,OACI,yBACIa,UAAU,aACVyE,MAAO,CAAEc,UAAW,OAAQgC,aAAc,SAE1C,4BACItG,QAAS,kBACL9B,EAAOqG,aAAa,uDAF5B,WAQA,4BACIvE,QAAS,kBACL9B,EAAOqG,aAAa,0BAF5B,YAQA,4BACIvE,QAAS,WACL9B,EAAOW,kBAAkB,MAAO,GAChCX,EAAO+B,UAAU,YAHzB,kBAQA,4BAAQD,QAAS,kBAAM9B,EAAOW,kBAAkB,MAAO,KAAvD,mBAiHGmI,EAzGJ,SAAC,GAAgB,IAAd9I,EAAa,EAAbA,OAAa,EACOE,oBAAS,GADhB,mBAChB+B,EADgB,KACPC,EADO,OAEWhC,oBAAS,GAFpB,mBAEhBqG,EAFgB,KAELC,EAFK,KAYvBrE,qBAAU,WACN,OAAO,WACHnC,EAAOoC,WAEZ,CAACpC,IAaJ,OACI,yBAAKa,UAAU,aACX,mDACyB,IACrB,kBAAC,IAAD,CACIiB,QAAS,kBAAM0E,GAAa,IAC5BC,KAAMC,OAGd,kBAAC,IAAD,CACIC,OAAQJ,EACRK,aAAa,uBACbtB,MAvBA,CACRuB,QAAS,CAAEC,WAAY,aACvBC,QAAS,CACLD,WAAY,UACZE,MAAO,UAqBH,oDACA,yBAAK1B,MAAO,CAAEY,OAAQ,KAClB,yBAAK6C,IAAI,8DAA8DnF,MAAM,MAAMoF,IAAI,sBACvF,2BAAG,6FAAkE,uBAAGC,KAAK,uEAAR,kBACrE,yHACA,6FAEI,4BACI,6CACA,wZAOA,+CACA,4BAAI,ghBAOA,qRAKJ,qCACA,gWAOZ,4BACIpI,UAAU,cACViB,QAAS,kBAAM0E,GAAa,KAFhC,UAOHvE,EACG,oCACI,yBAAKpB,UAAU,WACX,kBAAC,EAAD,CAAoBb,OAAQA,IAC5B,kBAAC,EAAD,CAAWA,OAAQA,KAEvB,kBAAC,EAAD,CAAaA,OAAQA,IACrB,yBAAKsF,MAAO,CAAEzB,OAAQ,UAClB,kBAAC,EAAD,CAAkB7D,OAAQA,MAIlC,4BAAQ8B,QA/FA,WAChB9B,EAAOiH,UAAU,qBACjBjH,EAAOqC,WCvJA,6iCDwJPrC,EAAOsC,QACPtC,EAAOuC,aAAaC,SACpBN,GAAW,KA0FH,mBE5NDgH,EAtBF,WAET,OACI,yBAAKrI,UAAU,aACX,yBAAKA,UAAU,WACf,yCACA,qJAC4D,uBAAGoI,KAAK,sBAAR,UAD5D,KAGA,sHACA,mCACA,2BACI,6VAE4C,uBAAGA,KAAK,6BAAR,aAF5C,S,eCHVE,EAAa,WACf,OACI,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMC,GAAG,KAAI,qDAEjB,4BACI,kBAAC,IAAD,CAAMA,GAAG,aAAT,uBAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,gBAAT,0BAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,OAAT,UAgDLC,MAzCf,WAAgB,IAAD,EACiBnJ,mBAAS,MAD1B,mBACJF,EADI,KACIsJ,EADJ,KAWX,OATAnH,qBAAU,WACQ,MAAVnC,GACAuJ,IAAUC,aAAaC,MAAK,WACxB,IAAMC,EAAK,IAAIH,IACfD,EAAUI,QAGnB,CAAC1J,IAGA,yBAAKa,UAAU,OACb,kBAAC,EAAD,MACa,MAAVb,EACG,4BAAQa,UAAU,cACd,0CAGJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO8I,KAAK,aACR,kBAAC,EAAD,CAAU3J,OAAQA,KAEtB,kBAAC,IAAD,CAAO2J,KAAK,gBACR,kBAAC,EAAD,CAAa3J,OAAQA,KAEzB,kBAAC,IAAD,CAAO2J,KAAK,UACR,kBAAC,EAAD,CAAM3J,OAAQA,KAElB,kBAAC,IAAD,CAAO2J,KAAK,OACR,kBAAC,EAAD,CAAI3J,OAAQA,KAEhB,kBAAC,IAAD,CAAO2J,KAAK,KACR,kBAAC,EAAD,UCxDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAAMC,cAAc,SAEpBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACG,kBAAC,EAAD,QAGLC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.184821e8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { range, map, curry } from \"ramda\";\nimport \"./index.css\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport orc from \"!!raw-loader!./additive.orc\";\n\nconst dbToAmp = (db) => {\n    return db <= -60 ? 0 : Math.exp((db * Math.log(10)) / 20);\n};\n\nconst Slider = (csound, sliderNum) => {\n    const [db, setdb] = useState(-60);\n\n    const amp = dbToAmp(db);\n    const sliderChan = `harm${sliderNum}`;\n\n    csound.setControlChannel(sliderChan, amp);\n    return (\n        <div key={sliderChan} className=\"sliderBox\">\n                \n            <div className=\"sliderLabel\">{`Harmonic ${sliderNum}`}</div>\n            <input\n                type=\"range\"\n                min=\"-60\"\n                max=\"0\"\n                value={db}\n                onInput={(evt) => {\n                    const val = evt.target.value;\n                    setdb(val);\n                }}\n                onDoubleClick={(evt) => {\n                    setdb(-60);\n                }}\n            />\n            <div className=\"sliderValue\">{db}</div>\n        </div>\n    );\n};\n\nconst Sliders = ({ csound }) => {\n    const csSlider = curry(Slider)(csound);\n    const sliders = map(csSlider, range(1, 17));\n    return <div>{sliders}</div>;\n};\n\nconst Buttons = ({ csound }) => {\n    return (\n        <div className=\"buttonBox\">\n            <button onClick={() => csound.readScore(\"i1.1 0 -1\")}>On</button>\n            <button onClick={() => csound.readScore(\"i-1.1 0 1\")}>Off</button>\n            <button onClick={() => csound.readScore(\"i1 0 .2\")}>Trigger</button>\n        </div>\n    );\n};\n\nconst Additive = ({ csound }) => {\n    const [started, setStarted] = useState(false);\n\n    const startCsound = () => {\n        csound.compileOrc(orc);\n        csound.start();\n        csound.audioContext.resume();\n        setStarted(true);\n    };\n\n    useEffect(() => {\n        return () => {\n            csound.reset();\n        }\n    }, [csound]);\n\n    return (\n        <div className=\"container\">\n            <h2>Additive Synthesis</h2>\n            {started ? (\n                <>\n                    <Buttons csound={csound} />\n                    <Sliders csound={csound} />\n                    <div>\n                        <ul>\n                            <li>Double-click slider to reset to -60 db</li>\n                        </ul>\n                    </div>\n                </>\n            ) : (\n                <button onClick={startCsound}>Start Project</button>\n            )}\n        </div>\n    );\n};\n\nexport default Additive;\n","export default \";; Author: Steven Yi\\n;; Description: Additive Synthesis \\n\\nsr=48000\\nksmps=128\\n0dbfs=1\\nksmps=128\\nnchnls=2\\n\\ninstr 1\\n    ifreq = 200\\n    asig = oscili(chnget:k(\\\"harm1\\\"), ifreq)\\n    asig += oscili(chnget:k(\\\"harm2\\\"), ifreq * 2)\\n    asig += oscili(chnget:k(\\\"harm3\\\"), ifreq * 3)\\n    asig += oscili(chnget:k(\\\"harm4\\\"), ifreq * 4)\\n    asig += oscili(chnget:k(\\\"harm5\\\"), ifreq * 5)\\n    asig += oscili(chnget:k(\\\"harm6\\\"), ifreq * 6)\\n    asig += oscili(chnget:k(\\\"harm7\\\"), ifreq * 7)\\n    asig += oscili(chnget:k(\\\"harm8\\\"), ifreq * 8)\\n    asig += oscili(chnget:k(\\\"harm9\\\"), ifreq * 9)\\n    asig += oscili(chnget:k(\\\"harm10\\\"), ifreq * 10)\\n    asig += oscili(chnget:k(\\\"harm11\\\"), ifreq * 11)\\n    asig += oscili(chnget:k(\\\"harm12\\\"), ifreq * 12)\\n    asig += oscili(chnget:k(\\\"harm13\\\"), ifreq * 13)\\n    asig += oscili(chnget:k(\\\"harm14\\\"), ifreq * 14)\\n    asig += oscili(chnget:k(\\\"harm15\\\"), ifreq * 15)\\n    asig += oscili(chnget:k(\\\"harm16\\\"), ifreq * 16)\\n\\n    asig *= 1/16 * expsegr:a(0.001, .05, 1, 4, .001)\\n\\n    out(asig, asig)\\nendin\";","import React, { useEffect, useRef } from \"react\";\nimport { scaleLinear } from \"d3-scale\";\n\n// resize code used from https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\nfunction resize(canvas) {\n    // Lookup the size the browser is displaying the canvas.\n    var displayWidth = canvas.clientWidth;\n    var displayHeight = canvas.clientHeight;\n\n    // Check if the canvas is not the same size.\n    if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n        // Make the canvas the same size\n        canvas.width = displayWidth;\n        canvas.height = displayHeight;\n    }\n}\n\nconst connectVisualizer = (csound, canvasRef) => {\n    if (!canvasRef || !canvasRef.current) {\n        return null;\n    } else {\n        const canvas = canvasRef.current;\n\n        const ctx = canvas.getContext(\"2d\");\n\n        if (ctx == null) {\n            return null;\n        }\n\n        //console.log(\"Connect Visualizer!\");\n\n        const node = csound.getNode();\n        const context = node.context;\n        const scopeNode = context.createAnalyser();\n        scopeNode.fftSize = 2048;\n        node.connect(scopeNode);\n\n        const mags = function() {\n            resize(canvas);\n            const width = canvas.width;\n            const height = canvas.height;\n            let freqData = new Uint8Array(scopeNode.frequencyBinCount);\n\n            const scaleY = scaleLinear()\n                            .domain([0, 256])\n                            .range([height, 0]);\n\n            scopeNode.getByteFrequencyData(freqData);\n\n            ctx.clearRect(0, 0, width, height);\n\n            ctx.fillStyle = \"rgba(0, 20, 0, 0.1)\";\n            ctx.fillRect(0, 0, width, height);\n            ctx.lineWidth = 2;\n            ctx.strokeStyle = \"rgba(0,255,0,1)\";\n            ctx.beginPath();\n\n            for (var x = 0; x < width; x++) {\n                let indx = Math.floor(\n                    (x / width) * scopeNode.frequencyBinCount\n                );\n                ctx.lineTo(x, scaleY(freqData[indx]));\n            }\n\n            ctx.stroke();\n            requestAnimationFrame(mags);\n        };\n        mags();\n\n        return scopeNode;\n    }\n};\n\nconst disconnectVisualizer = (csound, scopeNode) => {\n    const node = csound.getNode();\n    node.disconnect(scopeNode);\n\n    //console.log(\"Disconnect Visualizer!\");\n};\n\nexport const SpectralAnalyzer = ({csound}) => {\n    const canvasRef = useRef();\n\n    useEffect(() => {\n        let scopeNode = null;\n        if (csound && canvasRef.current) {\n            scopeNode = connectVisualizer(csound, canvasRef);\n        }\n\n        return () => {\n            if (csound && scopeNode) {\n                disconnectVisualizer(csound, scopeNode);\n            }\n        };\n    }, [canvasRef, csound]);\n\n    return (\n        <canvas\n            ref={canvasRef}\n            style={{ width: \"100%\", height: \"100%\", display: \"block\" }}\n        ></canvas>\n    );\n};\n\nexport default SpectralAnalyzer;\n","import React, { useState, useEffect } from \"react\";\nimport SpectralAnalyzer from \"../SpectralAnalyzer\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from \"react-modal\";\nimport \"./index.css\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport orc from \"!!raw-loader!./subtractive.orc\";\n\nconst SourcePanel = ({ csound }) => {\n    return (\n        <div className=\"subPanel1\">\n            <h3>Source</h3>\n            <label for=\"waveform\">Choose a waveform:</label>\n            <select\n                id=\"waveform\"\n                name=\"waveform\"\n                onChange={(evt) => {\n                    csound.setControlChannel(\"waveform\", evt.target.value);\n                }}\n            >\n                <option value=\"0\">Sawtooth (1/n)</option>\n                <option value=\"10\">Square (1/n, odd partials)</option>\n                <option value=\"12\">Triangle (1/n&#x00B2;, odd partials)</option>\n                <option value=\"-1\">Impulse</option>\n                <option value=\"-2\">\n                    Buzz (equal strength harmonics up to Nyquist)\n                </option>\n                <option value=\"-3\">White Noise</option>\n                <option value=\"-4\">Pink Noise</option>\n            </select>\n        </div>\n    );\n};\n\nconst FilterPanel = ({ csound }) => {\n    const [freq, setFreq] = useState(1000);\n    const [Q, setQ] = useState(0.5);\n\n    csound.setControlChannel(\"filterCutoff\", freq);\n    csound.setControlChannel(\"filterQ\", Q);\n    return (\n        <div className=\"subPanel2\">\n            <h3>Filter</h3>\n\n            <label for=\"filterType\">Filter Type:</label>\n            <select\n                id=\"filterType\"\n                name=\"filterType\"\n                onChange={(evt) => {\n                    csound.setControlChannel(\"filterType\", evt.target.value);\n                }}\n            >\n                <option value=\"0\">None</option>\n                <option value=\"1\">Low Pass: 2-pole (-12dB oct)</option>\n                <option value=\"2\">High Pass: 2-pole (-12dB oct)</option>\n                <option value=\"3\">Band Pass: 2-pole (-12dB oct)</option>\n                <option value=\"4\">\n                    Band Reject (Notch): 2-pole (-12dB oct)\n                </option>\n                <option value=\"5\">Low Pass: 4-pole (-24dB oct)</option>\n            </select>\n\n            <input\n                type=\"range\"\n                min=\"20\"\n                max=\"20000\"\n                value={freq}\n                onInput={(evt) => {\n                    const val = evt.target.value;\n                    setFreq(val);\n                }}\n                onDoubleClick={(evt) => {\n                    setFreq(1000);\n                }}\n            />\n            <div style={{ margin: \"auto\" }}>{freq} Hz</div>\n\n            <input\n                type=\"range\"\n                min=\"0.5\"\n                max=\"25\"\n                value={Q}\n                onInput={(evt) => {\n                    const val = evt.target.value;\n                    setQ(val);\n                }}\n                onDoubleClick={(evt) => {\n                    setQ(0.5);\n                }}\n            />\n            <div style={{ margin: \"auto\" }}>{Q} Q</div>\n        </div>\n    );\n};\n\nconst PlayButtons = ({ csound }) => {\n    return (\n        <div className=\"buttonBox\" style={{ marginTop: \"30px\" }}>\n            <button\n                onClick={() =>\n                    csound.evaluateCode(\"schedule(1, 0, 2, cpsmidinn(48))\")\n                }\n            >\n                C3\n            </button>\n            <button\n                onClick={() =>\n                    csound.evaluateCode(\"schedule(1, 0, 2, cpsmidinn(60))\")\n                }\n            >\n                C4\n            </button>\n            <button\n                onClick={() =>\n                    csound.evaluateCode(\"schedule(1, 0, 2, cpsmidinn(72))\")\n                }\n            >\n                C5\n            </button>\n            <button\n                onClick={() => {\n                    csound.setControlChannel(\"run\", 1);\n                    csound.readScore(\"i2 0 1\");\n                }}\n            >\n                Start Note Gen\n            </button>\n            <button onClick={() => csound.setControlChannel(\"run\", 0)}>\n                Stop Note Gen\n            </button>\n        </div>\n    );\n};\n\nconst Subtractive = ({ csound }) => {\n    const [started, setStarted] = useState(false);\n    const [modalOpen, setModalOpen] = useState(false);\n\n    const startCsound = () => {\n        csound.setOption(\"-+msg_color=false\");\n        csound.compileOrc(orc);\n        csound.start();\n        csound.audioContext.resume();\n        setStarted(true);\n    };\n\n    useEffect(() => {\n        return () => {\n            csound.reset();\n        };\n    }, [csound]);\n\n    let style = {\n        overlay: { background: \"#00000055\" },\n        content: { background: \"#000000\", color: \"#fff\", \n                    // display: \"grid\",\n                    // gridTemplateRows: \"30 auto 30\",\n                    // rowGap: \"10px\",\n     },\n    };\n\n    return (\n        <div className=\"container\">\n            <h2>\n                Subtractive Synthesis{\" \"}\n                <FontAwesomeIcon\n                    onClick={() => setModalOpen(true)}\n                    icon={faInfoCircle}\n                />\n            </h2>\n            <Modal\n                isOpen={modalOpen}\n                contentLabel=\"Subtractive Synthesis\"\n                style={style}\n            >\n                    <h2>Subtractive Synthesis </h2>\n                    <div style={{margin: 10}}><emph>(Content to be added here)</emph></div>\n                    <button\n                        className=\"closeButton\"\n                        onClick={() => setModalOpen(false)}\n                    >\n                        Close\n                    </button>\n            </Modal>\n            {started ? (\n                <>\n                    <div className=\"subGrid\">\n                        <SourcePanel csound={csound} />\n                        <FilterPanel csound={csound} />\n                    </div>\n                    <PlayButtons csound={csound} />\n                    <div style={{ height: \"180px\" }}>\n                        <SpectralAnalyzer csound={csound} />\n                    </div>\n                </>\n            ) : (\n                <button onClick={startCsound}>Start Project</button>\n            )}\n        </div>\n    );\n};\n\nexport default Subtractive;\n","export default \";; Author: Steven Yi\\n;; Description: Subtractive Synthesis\\n\\nsr=48000\\nksmps=128\\n0dbfs=1\\nnchnls=2\\n\\ngisine ftgen 0, 0, 65536, 10, 1\\n\\ninstr 1\\n    ifreq = p4 \\n\\n    print ifreq\\n\\n    ;; SOURCE\\n    iwave = chnget:i(\\\"waveform\\\")\\n\\n    if(iwave == -1) then\\n        asig = mpulse(1, 1/ifreq)\\n    elseif (iwave == -2) then\\n        asig = buzz(1, ifreq, (sr / 2) / ifreq, gisine)\\n    elseif (iwave == -3) then\\n        asig = random:a(-1, 1) \\n    elseif (iwave == -4) then\\n        asig = pinker()\\n    else \\n        asig = vco2(1, ifreq, iwave)\\n    endif\\n\\n\\n    ;; FILTER \\n    kfiltType = chnget:i(\\\"filterType\\\")\\n    kcutoff = chnget:k(\\\"filterCutoff\\\")\\n    kcutoff = port(kcutoff, 0.1, chnget:i(\\\"filterCutoff\\\"))\\n\\n    kQ = chnget:k(\\\"filterQ\\\")\\n    kQ = port(kQ, 0.1, chnget:i(\\\"filterQ\\\"))\\n    if (kfiltType == 1)  then\\n        asig = zdf_2pole(asig, kcutoff, kQ)\\n    elseif (kfiltType == 2)  then\\n        asig = zdf_2pole(asig, kcutoff, kQ, 1)\\n    elseif (kfiltType == 3)  then\\n        asig = zdf_2pole(asig, kcutoff, kQ, 3)\\n    elseif (kfiltType == 4)  then\\n        asig = zdf_2pole(asig, kcutoff, kQ, 4)\\n    elseif (kfiltType == 5) then\\n        asig = zdf_ladder(asig, kcutoff, kQ)\\n    endif\\n\\n    ;; DECLICK ENVELOPE\\n    asig *= linen:a(ampdbfs(-12), 0.01, p3, 0.01)\\n\\n    out(asig, asig)\\nendin\\n\\ninstr 2\\n    irun = chnget:i(\\\"run\\\")\\n    ivals[] = fillarray(0,2,4,5,7,9,11)\\n    inn = ivals[int(random:i(0,7))]\\n    if(irun == 1) then\\n        schedule(1, 0, 1, cpsmidinn(48 + inn))\\n        schedule(p1, 1, 0)\\n    endif\\nendin\";","import React, { useState, useEffect } from \"react\";\nimport SpectralAnalyzer from \"../SpectralAnalyzer\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from \"react-modal\";\nimport \"./index.css\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport orc from \"!!raw-loader!./amrm.orc\";\n\nconst SourcePanel = ({ csound }) => {\n    const [waveForm, setWaveForm] = useState(-1);\n\n    csound.setControlChannel(\"waveform\", waveForm);\n\n    return (\n        <div className=\"subPanel1\">\n            <h3>Carrier</h3>\n            <label htmlFor=\"waveform\">Choose a waveform:</label>\n            <select\n                id=\"waveform\"\n                name=\"waveform\"\n                onChange={(evt) => {\n                    setWaveForm(evt.target.value);\n                }}\n            >\n                <option value=\"-1\">Sine</option>\n                <option value=\"0\">Sawtooth (1/n)</option>\n                <option value=\"10\">Square (1/n, odd partials)</option>\n                <option value=\"12\">Triangle (1/n&#x00B2;, odd partials)</option>\n            </select>\n        </div>\n    );\n};\n\nconst HSlider = ({\n    id,\n    sliderLabel,\n    valLabel,\n    defaultValue,\n    val,\n    setVal,\n    min,\n    max,\n}) => {\n    return (\n        <div className=\"hslider\">\n            <label htmlFor={id}>{sliderLabel}</label>\n            <input\n                id={id}\n                type=\"range\"\n                min={min}\n                max={max}\n                step=\"0.01\"\n                defaultValue={val}\n                onInput={(evt) => {\n                    const val = evt.target.value;\n                    setVal(val);\n                }}\n                onDoubleClick={(evt) => {\n                    setVal(defaultValue);\n                }}\n            />\n            <div style={{ margin: \"auto\", gridColumn: 2, gridRow: 2 }}>\n                {val} {valLabel}\n            </div>\n        </div>\n    );\n};\n\nconst ModulatorPanel = ({ csound }) => {\n    const [enabled, setEnabled] = useState(false);\n    const [freq, setFreq] = useState(220);\n    const [amp, setAmp] = useState(1);\n    const [offset, setOffset] = useState(0);\n\n    csound.setControlChannel(\"modEnabled\", enabled ? 1 : 0);\n    csound.setControlChannel(\"modFreq\", freq);\n    csound.setControlChannel(\"modAmp\", amp);\n    csound.setControlChannel(\"modOffset\", offset);\n\n    return (\n        <div className=\"subPanel2\">\n            <h3>Modulator</h3>\n\n            <input\n                id=\"enabledCheckbox\"\n                type=\"checkbox\"\n                checked={enabled}\n                onChange={(evt) => setEnabled(!enabled)}\n            />\n            <label htmlFor=\"enabledCheckbox\">Enable Modulation</label>\n\n            <HSlider\n                id=\"freqSlider\"\n                sliderLabel=\"Frequency\"\n                min={0.01}\n                max={440}\n                defaultValue={220}\n                valLabel=\"Hz\"\n                val={freq}\n                setVal={setFreq}\n            />\n\n            <HSlider\n                id=\"ampSlider\"\n                sliderLabel=\"Amplitude\"\n                min={0}\n                max={1}\n                defaultValue={1}\n                val={amp}\n                setVal={setAmp}\n            />\n\n            <HSlider\n                id=\"offsetSlider\"\n                sliderLabel=\"DC Offset\"\n                min={0}\n                max={1}\n                defaultValue={0}\n                val={offset}\n                setVal={setOffset}\n            />\n        </div>\n    );\n};\n\nconst PlayButtons = ({ csound }) => {\n    return (\n        <div\n            className=\"buttonBox\"\n            style={{ marginTop: \"20px\", marginBottom: \"20px\" }}\n        >\n            <button\n                onClick={() =>\n                    csound.evaluateCode(\"schedule(1.1, 0, 2, cpsmidinn(69))\")\n                }\n            >\n                A440\n            </button>\n            <button\n                onClick={() => {\n                    csound.setControlChannel(\"run\", 1);\n                    csound.readScore(\"i2 0 1\");\n                }}\n            >\n                Start Note Gen\n            </button>\n            <button onClick={() => csound.setControlChannel(\"run\", 0)}>\n                Stop Note Gen\n            </button>\n        </div>\n    );\n};\n\nconst AMRM = ({ csound }) => {\n    const [started, setStarted] = useState(false);\n    const [modalOpen, setModalOpen] = useState(false);\n\n    const startCsound = () => {\n        csound.setOption(\"-+msg_color=false\");\n        csound.compileOrc(orc);\n        csound.start();\n        csound.audioContext.resume();\n        setStarted(true);\n    };\n\n    useEffect(() => {\n        return () => {\n            csound.reset();\n        };\n    }, [csound]);\n\n    let style = {\n        overlay: { background: \"#00000055\" },\n        content: {\n            background: \"#000000\",\n            color: \"#fff\",\n            // display: \"grid\",\n            // gridTemplateRows: \"30 auto 30\",\n            // rowGap: \"10px\",\n        },\n    };\n\n    return (\n        <div className=\"container\">\n            <h2>\n                Amplitude/Ring Modulation{\" \"}\n                <FontAwesomeIcon\n                    onClick={() => setModalOpen(true)}\n                    icon={faInfoCircle}\n                />\n            </h2>\n            <Modal\n                isOpen={modalOpen}\n                contentLabel=\"Amplitude/Ring Modulation\"\n                style={style}\n            >\n                <h2>Amplitude/Ring Modulation </h2>\n                <div style={{ margin: 10 }}>\n                    <emph>(Content to be added here)</emph>\n                </div>\n                <button\n                    className=\"closeButton\"\n                    onClick={() => setModalOpen(false)}\n                >\n                    Close\n                </button>\n            </Modal>\n            {started ? (\n                <>\n                    <div className=\"subGrid\">\n                        <ModulatorPanel csound={csound} />\n                        <SourcePanel csound={csound} />\n                    </div>\n                    <PlayButtons csound={csound} />\n                    <div style={{ height: \"180px\" }}>\n                        <SpectralAnalyzer csound={csound} />\n                    </div>\n                </>\n            ) : (\n                <button onClick={startCsound}>Start Project</button>\n            )}\n        </div>\n    );\n};\n\nexport default AMRM;\n","export default \";; Author: Steven Yi\\n;; Description: Amplitude and Ring Modulation\\n\\nsr=48000\\nksmps=128\\n0dbfs=1\\nnchnls=2\\n\\ngisine ftgen 0, 0, 65536, 10, 1\\n\\ninstr 1\\n    ifreq = p4 \\n\\n    ;; MODULATOR \\n    imodEnabled = chnget:i(\\\"modEnabled\\\")\\n    kmodFreq = chnget:k(\\\"modFreq\\\")\\n    kmodAmp = chnget:k(\\\"modAmp\\\")\\n    kmodOffset = chnget:k(\\\"modOffset\\\")\\n\\n    ;; SOURCE (Carrier)\\n    iwave = chnget:i(\\\"waveform\\\")\\n\\n    if(iwave == -1) then\\n        asig = oscili(1, ifreq)\\n    else \\n        asig = vco2(1, ifreq, iwave)\\n    endif\\n\\n\\n    if(imodEnabled == 1) then\\n      asig *= oscili(kmodAmp, kmodFreq) + kmodOffset\\n    endif\\n\\n    ;; DECLICK ENVELOPE\\n    asig *= linen:a(ampdbfs(-12), 0.02, p3, 0.02)\\n\\n    out(asig, asig)\\nendin\\n\\ninstr 2\\n    irun = chnget:i(\\\"run\\\")\\n    ivals[] = fillarray(0,2,4,5,7,9,11)\\n    inn = ivals[int(random:i(0,7))]\\n    if(irun == 1) then\\n        schedule(1, 0, 1, cpsmidinn(84 + inn))\\n        schedule(p1, 1, 0)\\n    endif\\nendin\";","import React, { useState, useEffect } from \"react\";\nimport SpectralAnalyzer from \"../SpectralAnalyzer\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from \"react-modal\";\nimport \"./index.css\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport orc from \"!!raw-loader!./fm.orc\";\n\nconst InfoPanel = ({ csound }) => {\n    return (\n        <div className=\"subPanel1\">\n            <h3>Notes</h3>\n\n            <p>Carrier-to-Modulator (C:M) ratio affects the frequencies of the sidebands generated</p>\n            <p>Index controls number of significant sidebands generated (roughly index + 1)</p>\n\n        </div>\n    );\n};\n\nconst HSlider = ({\n    id,\n    sliderLabel,\n    valLabel,\n    defaultValue,\n    val,\n    setVal,\n    min,\n    max,\n    step=0.01\n}) => {\n    return (\n        <div className=\"hslider\">\n            <label htmlFor={id}>{sliderLabel}</label>\n            <input\n                id={id}\n                type=\"range\"\n                min={min}\n                max={max}\n                step={step} \n                defaultValue={val}\n                onInput={(evt) => {\n                    const val = evt.target.value;\n                    setVal(val);\n                }}\n                onDoubleClick={(evt) => {\n                    setVal(defaultValue);\n                }}\n            />\n            <div style={{ margin: \"auto\", gridColumn: 2, gridRow: 2 }}>\n                {val} {valLabel}\n            </div>\n        </div>\n    );\n};\n\nconst SimpleFMPanelPanel = ({ csound }) => {\n\n    const [carRatio, setCarRatio] = useState(1);\n    const [modRatio, setModRatio] = useState(1);\n    const [index, setIndex] = useState(1);\n\n    csound.setControlChannel(\"modRatio\", modRatio / carRatio);\n    csound.setControlChannel(\"index\", index);\n\n    return (\n        <div className=\"subPanel2\">\n            <h3>Simple FM</h3>\n\n            <HSlider\n                id=\"modRatioSlider\"\n                sliderLabel=\"Modulator Ratio\"\n                min={1}\n                max={9}\n                step={0.1}\n                defaultValue={1}\n                val={modRatio}\n                setVal={setModRatio}\n            />\n\n            <HSlider\n                id=\"carRatioSlider\"\n                sliderLabel=\"Carrier Ratio\"\n                min={1}\n                max={9}\n                defaultValue={1}\n                step={0.1}\n                val={carRatio}\n                setVal={setCarRatio}\n            />\n\n\n            <HSlider\n                id=\"indexSlider\"\n                sliderLabel=\"Index\"\n                min={0}\n                max={10}\n                step={0.01}\n                defaultValue={0}\n                val={index}\n                setVal={setIndex}\n            />\n        </div>\n    );\n};\n\nconst PlayButtons = ({ csound }) => {\n    return (\n        <div\n            className=\"buttonBox4\"\n            style={{ marginTop: \"20px\", marginBottom: \"20px\" }}\n        >\n            <button\n                onClick={() =>\n                    csound.evaluateCode(\"schedule(1.1, 0, -2, cpsmidinn(69), ampdbfs(-12))\")\n                }\n            >\n                A440 On\n            </button>\n\n            <button\n                onClick={() =>\n                    csound.evaluateCode(\"schedule(-1.1, 0, 2)\")\n                }\n            >\n                A440 Off\n            </button>\n\n            <button\n                onClick={() => {\n                    csound.setControlChannel(\"run\", 1);\n                    csound.readScore(\"i2 0 1\");\n                }}\n            >\n                Start Note Gen\n            </button>\n            <button onClick={() => csound.setControlChannel(\"run\", 0)}>\n                Stop Note Gen\n            </button>\n        </div>\n    );\n};\n\n\nconst FM = ({ csound }) => {\n    const [started, setStarted] = useState(false);\n    const [modalOpen, setModalOpen] = useState(true);\n\n    const startCsound = () => {\n        csound.setOption(\"-+msg_color=false\");\n        csound.compileOrc(orc);\n        csound.start();\n        csound.audioContext.resume();\n        setStarted(true);\n    };\n\n    useEffect(() => {\n        return () => {\n            csound.reset();\n        };\n    }, [csound]);\n\n    let style = {\n        overlay: { background: \"#00000055\" },\n        content: {\n            background: \"#000000\",\n            color: \"#fff\",\n            // display: \"grid\",\n            // gridTemplateRows: \"30 auto 30\",\n            // rowGap: \"10px\",\n        },\n    };\n\n    return (\n        <div className=\"container\">\n            <h2>\n                Frequency Modulation{\" \"}\n                <FontAwesomeIcon\n                    onClick={() => setModalOpen(true)}\n                    icon={faInfoCircle}\n                />\n            </h2>\n            <Modal\n                isOpen={modalOpen}\n                contentLabel=\"Frequency Modulation\"\n                style={style}\n            >\n                <h2>Frequency Modulation</h2>\n                <div style={{ margin: 10 }}>\n                    <img src=\"https://flossmanual.csound.com/resources/images/04-d-fm.png\" width=\"300\" alt=\"Simple FM Diagram\"></img>\n                    <p><em>Diagram of Simple FM, from the Csound FLOSS manual chapter on <a href=\"https://flossmanual.csound.com/sound-synthesis/frequency-modulation\">FM Synthesis</a></em></p>\n                    <p>Simple FM refers to frequency modulation with two operators (i.e., sine-wave oscillators).</p>\n                    <p>There are a few parameters we are concerned with in Simple FM:</p>\n\n                        <dl>\n                            <dt>Carrier Ratio</dt>\n                            <dd>The ratio of the carrier's frequency to the given base frequency for a note. We typically \n                                use 1 for carrier ratio with simple 2-operator FM so that we hear the fundamental, but \n                                in more complex FM programming (i.e., when using more than 1 carrier), we can use the \n                                carrier ratio to offset where the spectrum for a carrier begins, giving a lot of flexibility \n                                for spectrum design.\n                            </dd>\n\n                            <dt>Modulator Ratio</dt>\n                            <dd><p>The ratio of the modulator's frequency to the given base frequency for a note.\n                                We use the ratio between the modulator and the carrier's calculated frequencies to determine what \n                                frequencies will be generated for sidebands. For example, with a modulator ratio of 2 and a \n                                carrier ratio of 1, we will get side bands at Fc&plusmn;Fm. If the base frequency is 100, \n                                with C:M of 1:2, we should get sidebands at [300, 500, ...] for the positive sidebands and \n                                [-100, -300, -500, ...] for the negative sidebands.</p> \n                                \n                                <p>Spectrum can become quite interesting when the negative and \n                                positive sideband frequencies do not overlap. For C:M of 1:3 and base frequency 100, we get positive \n                                sidebands of [400, 700, ...] and negative sidebands of [-200, -500, -800, ...] etc. </p>\n                            </dd>\n\n                            <dt>Index</dt>\n                            <dd>Value that controls the amplitude of frequency modulation that occurs for the carrier, which \n                                in turn affects the number of sidebands generated. The number of sidebands generated is roughly \n                                Index + 1, so for an index of 1, roughly 2 sidebands will be generated in the positive direction and 2 in the \n                                negative direction.  \n                            </dd>\n                        </dl>\n                </div>\n                <button\n                    className=\"closeButton\"\n                    onClick={() => setModalOpen(false)}\n                >\n                    Close\n                </button>\n            </Modal>\n            {started ? (\n                <>\n                    <div className=\"subGrid\">\n                        <SimpleFMPanelPanel csound={csound} />\n                        <InfoPanel csound={csound} />\n                    </div>\n                    <PlayButtons csound={csound} />\n                    <div style={{ height: \"180px\" }}>\n                        <SpectralAnalyzer csound={csound} />\n                    </div>\n                </>\n            ) : (\n                <button onClick={startCsound}>Start Project</button>\n            )}\n        </div>\n    );\n};\n\nexport default FM;\n","export default \";; Author: Steven Yi\\n;; Description: Frequency Modulation\\n\\nsr=48000\\nksmps=128\\n0dbfs=1\\nnchnls=2\\n\\ngisine ftgen 0, 0, 65536, 10, 1\\n\\ninstr 1\\n    ifreq = p4 \\n    iamp = p5\\n\\n    ;; MODULATOR \\n    kmod_ratio = chnget:k(\\\"modRatio\\\")  ;; ratio of modulator to carrier frequency\\n\\n    icarfreq = p4   ;; carrier frequency set to value given by user\\n    kmodfreq = icarfreq * kmod_ratio  ;; derived value for modulator frequency\\n\\n    kindex = chnget:k(\\\"index\\\")   ;; controls amount of energy in sidebands \\n\\n    kmod_amp = kindex * kmodfreq\\n              \\n    ;; OPERATORS\\n    amod = oscili(kmod_amp, kmodfreq)  ;; \\\"Operator 1\\\"\\n    acar = oscili(iamp, icarfreq + amod)  ;; \\\"Operator 2\\\" \\n\\n    ;; DECLICK ENVELOPE\\n    asig = acar * linsegr:a(0, 0.02, ampdbfs(-12), 0.02, 0)\\n\\n    out(asig, asig)\\nendin\\n\\ninstr 2\\n    irun = chnget:i(\\\"run\\\")\\n    ivals[] = fillarray(0,2,4,5,7,9,11)\\n    inn = ivals[int(random:i(0,7))]\\n    if(irun == 1) then\\n        schedule(1, 0, 1, cpsmidinn(72 + inn), ampdbfs(-12))\\n        schedule(p1, 1, 0)\\n    endif\\nendin\";","import React from \"react\";\n\nconst Main = () => {\n\n    return (\n        <div className=\"container\">\n            <div className=\"content\">\n            <h2>Home Page</h2>\n            <p>Welcome to the Learn Synthesis home page!  This site contains \n               web-based tools for learning sound synthesis built using <a href=\"https://csound.com\">Csound</a>. \n            </p>\n            <p>Please use the navigation links to explore the tools for learning synthesis techniques.</p>\n            <p>&nbsp;</p>\n            <p>\n                <i>This site is currently under construction and is being used as part of the course IGME 670 at the Rochester Institute of Technology's School of Interactive Games and Media.\n                This site will continue to evolve over time as a tool for teaching and self-study of sound synthesis. \n                Please direct any questions and comments to <a href=\"mailto:stevenyi@gmail.com\">Steven Yi</a>.\n                </i>\n            </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Main;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport CsoundObj from \"@kunstmusik/csound\";\nimport Additive from \"./Additive\";\nimport Subtractive from \"./Subtractive\";\nimport AMRM from \"./AMRM\";\nimport FM from \"./FM\";\nimport Main from \"./Main\";\nimport { Switch, Route } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = () => {\n    return (\n        <nav>\n            <ul>\n                <li>\n                    <Link to=\"/\"><strong>Learn Synthesis</strong></Link>\n                </li>\n                <li>\n                    <Link to=\"/additive\">Additive Synthesis</Link>\n                </li>\n                <li>\n                    <Link to=\"/subtractive\">Subtractive Synthesis</Link>\n                </li>\n                <li>\n                    <Link to=\"/am_rm\">AM/RM</Link>\n                </li>\n                <li>\n                    <Link to=\"/fm\">FM</Link>\n                </li>\n            </ul>\n        </nav>\n    );\n};\n\nfunction App() {\n    const [csound, setCsound] = useState(null);\n    useEffect(() => {\n        if (csound == null) {\n            CsoundObj.initialize().then(() => {\n                const cs = new CsoundObj();\n                setCsound(cs);\n            });\n        }\n    }, [csound]);\n\n    return (\n        <div className=\"App\">\n          <Navigation/>\n            {csound == null ? (\n                <header className=\"App-header\">\n                    <p>Loading...</p>\n                </header>\n            ) : (\n                <Switch>\n                    <Route path=\"/additive\">\n                        <Additive csound={csound} />\n                    </Route>\n                    <Route path=\"/subtractive\">\n                        <Subtractive csound={csound} />\n                    </Route>\n                    <Route path=\"/am_rm\">\n                        <AMRM csound={csound} />\n                    </Route>\n                    <Route path=\"/fm\">\n                        <FM csound={csound} />\n                    </Route>\n                    <Route path=\"/\">\n                        <Main />\n                    </Route>\n                </Switch>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\nimport Modal from 'react-modal';\n\nModal.setAppElement(\"#root\");   \n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n       <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}