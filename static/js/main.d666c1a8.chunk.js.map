{"version":3,"sources":["Additive/index.jsx","SpectralAnalyzer/index.js","Subtractive/index.jsx","Main/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Slider","csound","sliderNum","useState","db","setdb","amp","Math","exp","log","dbToAmp","sliderChan","setControlChannel","key","className","type","min","max","value","onInput","evt","val","target","onDoubleClick","Sliders","csSlider","curry","sliders","map","range","Buttons","onClick","readScore","Additive","started","setStarted","useEffect","reset","compileOrc","start","audioContext","resume","SpectralAnalyzer","canvasRef","useRef","scopeNode","current","canvas","ctx","getContext","node","getNode","context","createAnalyser","fftSize","connect","mags","displayWidth","clientWidth","displayHeight","clientHeight","width","height","resize","freqData","Uint8Array","frequencyBinCount","scaleY","scaleLinear","domain","getByteFrequencyData","clearRect","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","x","indx","floor","lineTo","stroke","requestAnimationFrame","connectVisualizer","disconnect","disconnectVisualizer","ref","style","display","SourcePanel","for","id","name","onChange","FilterPanel","freq","setFreq","margin","PlayButtons","marginTop","evaluateCode","Subtractive","setOption","Main","href","Navigation","to","App","setCsound","CsoundObj","initialize","then","cs","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d666c1a8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { range, map, curry } from \"ramda\";\nimport \"./index.css\";\n\nconst dbToAmp = (db) => {\n    return db <= -60 ? 0 : Math.exp((db * Math.log(10)) / 20);\n};\n\nconst Slider = (csound, sliderNum) => {\n    const [db, setdb] = useState(-60);\n\n    const amp = dbToAmp(db);\n    const sliderChan = `harm${sliderNum}`;\n\n    csound.setControlChannel(sliderChan, amp);\n    return (\n        <div key={sliderChan} className=\"sliderBox\">\n                \n            <div className=\"sliderLabel\">{`Harmonic ${sliderNum}`}</div>\n            <input\n                type=\"range\"\n                min=\"-60\"\n                max=\"0\"\n                value={db}\n                onInput={(evt) => {\n                    const val = evt.target.value;\n                    setdb(val);\n                }}\n                onDoubleClick={(evt) => {\n                    setdb(-60);\n                }}\n            />\n            <div className=\"sliderValue\">{db}</div>\n        </div>\n    );\n};\n\nconst orc = `\nsr=48000\nksmps=128\n0dbfs=1\nksmps=128\nnchnls=2\n\ninstr 1\n    ifreq = 200\n    asig = oscili(chnget:k(\"harm1\"), ifreq)\n    asig += oscili(chnget:k(\"harm2\"), ifreq * 2)\n    asig += oscili(chnget:k(\"harm3\"), ifreq * 3)\n    asig += oscili(chnget:k(\"harm4\"), ifreq * 4)\n    asig += oscili(chnget:k(\"harm5\"), ifreq * 5)\n    asig += oscili(chnget:k(\"harm6\"), ifreq * 6)\n    asig += oscili(chnget:k(\"harm7\"), ifreq * 7)\n    asig += oscili(chnget:k(\"harm8\"), ifreq * 8)\n    asig += oscili(chnget:k(\"harm9\"), ifreq * 9)\n    asig += oscili(chnget:k(\"harm10\"), ifreq * 10)\n    asig += oscili(chnget:k(\"harm11\"), ifreq * 11)\n    asig += oscili(chnget:k(\"harm12\"), ifreq * 12)\n    asig += oscili(chnget:k(\"harm13\"), ifreq * 13)\n    asig += oscili(chnget:k(\"harm14\"), ifreq * 14)\n    asig += oscili(chnget:k(\"harm15\"), ifreq * 15)\n    asig += oscili(chnget:k(\"harm16\"), ifreq * 16)\n\n    asig *= 1/16 * expsegr:a(0.001, .05, 1, 4, .001)\n\n    out(asig, asig)\nendin\n`;\n\nconst Sliders = ({ csound }) => {\n    const csSlider = curry(Slider)(csound);\n    const sliders = map(csSlider, range(1, 17));\n    return <div>{sliders}</div>;\n};\n\nconst Buttons = ({ csound }) => {\n    return (\n        <div className=\"buttonBox\">\n            <button onClick={() => csound.readScore(\"i1.1 0 -1\")}>On</button>\n            <button onClick={() => csound.readScore(\"i-1.1 0 1\")}>Off</button>\n            <button onClick={() => csound.readScore(\"i1 0 .2\")}>Trigger</button>\n        </div>\n    );\n};\n\nconst Additive = ({ csound }) => {\n    const [started, setStarted] = useState(false);\n\n    const startCsound = () => {\n        csound.compileOrc(orc);\n        csound.start();\n        csound.audioContext.resume();\n        setStarted(true);\n    };\n\n    useEffect(() => {\n        return () => {\n            csound.reset();\n        }\n    }, [csound]);\n\n    return (\n        <div className=\"container\">\n            <h2>Additive Synthesis</h2>\n            {started ? (\n                <>\n                    <Buttons csound={csound} />\n                    <Sliders csound={csound} />\n                    <div>\n                        <ul>\n                            <li>Double-click slider to reset to -60 db</li>\n                        </ul>\n                    </div>\n                </>\n            ) : (\n                <button onClick={startCsound}>Start Project</button>\n            )}\n        </div>\n    );\n};\n\nexport default Additive;\n","import React, { useEffect, useRef } from \"react\";\nimport { scaleLinear } from \"d3-scale\";\n\n// resize code used from https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\nfunction resize(canvas) {\n    // Lookup the size the browser is displaying the canvas.\n    var displayWidth = canvas.clientWidth;\n    var displayHeight = canvas.clientHeight;\n\n    // Check if the canvas is not the same size.\n    if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n        // Make the canvas the same size\n        canvas.width = displayWidth;\n        canvas.height = displayHeight;\n    }\n}\n\nconst connectVisualizer = (csound, canvasRef) => {\n    if (!canvasRef || !canvasRef.current) {\n        return null;\n    } else {\n        const canvas = canvasRef.current;\n\n        const ctx = canvas.getContext(\"2d\");\n\n        if (ctx == null) {\n            return null;\n        }\n\n        //console.log(\"Connect Visualizer!\");\n\n        const node = csound.getNode();\n        const context = node.context;\n        const scopeNode = context.createAnalyser();\n        scopeNode.fftSize = 2048;\n        node.connect(scopeNode);\n\n        const mags = function() {\n            resize(canvas);\n            const width = canvas.width;\n            const height = canvas.height;\n            let freqData = new Uint8Array(scopeNode.frequencyBinCount);\n\n            const scaleY = scaleLinear()\n                            .domain([0, 256])\n                            .range([height, 0]);\n\n            scopeNode.getByteFrequencyData(freqData);\n\n            ctx.clearRect(0, 0, width, height);\n\n            ctx.fillStyle = \"rgba(0, 20, 0, 0.1)\";\n            ctx.fillRect(0, 0, width, height);\n            ctx.lineWidth = 2;\n            ctx.strokeStyle = \"rgba(0,255,0,1)\";\n            ctx.beginPath();\n\n            for (var x = 0; x < width; x++) {\n                let indx = Math.floor(\n                    (x / width) * scopeNode.frequencyBinCount\n                );\n                ctx.lineTo(x, scaleY(freqData[indx]));\n            }\n\n            ctx.stroke();\n            requestAnimationFrame(mags);\n        };\n        mags();\n\n        return scopeNode;\n    }\n};\n\nconst disconnectVisualizer = (csound, scopeNode) => {\n    const node = csound.getNode();\n    node.disconnect(scopeNode);\n\n    //console.log(\"Disconnect Visualizer!\");\n};\n\nexport const SpectralAnalyzer = ({csound}) => {\n    const canvasRef = useRef();\n\n    useEffect(() => {\n        let scopeNode = null;\n        if (csound && canvasRef.current) {\n            scopeNode = connectVisualizer(csound, canvasRef);\n        }\n\n        return () => {\n            if (csound && scopeNode) {\n                disconnectVisualizer(csound, scopeNode);\n            }\n        };\n    }, [canvasRef, csound]);\n\n    return (\n        <canvas\n            ref={canvasRef}\n            style={{ width: \"100%\", height: \"100%\", display: \"block\" }}\n        ></canvas>\n    );\n};\n\nexport default SpectralAnalyzer;\n","import React, { useState, useEffect } from \"react\";\nimport SpectralAnalyzer from \"../SpectralAnalyzer\";\nimport \"./index.css\";\n\nconst SourcePanel = ({ csound }) => {\n    return (\n        <div className=\"subPanel1\">\n            <h3>Source</h3>\n            <label for=\"waveform\">Choose a waveform:</label>\n            <select\n                id=\"waveform\"\n                name=\"waveform\"\n                onChange={(evt) => {\n                    csound.setControlChannel(\"waveform\", evt.target.value);\n                }}\n            >\n                <option value=\"0\">Sawtooth</option>\n                <option value=\"10\">Square</option>\n                <option value=\"12\">Triangle</option>\n            </select>\n        </div>\n    );\n};\n\nconst FilterPanel = ({ csound }) => {\n    const [freq, setFreq] = useState(1000);\n\n    csound.setControlChannel(\"filterCutoff\", freq);\n    return (\n        <div className=\"subPanel2\">\n            <h3>Filter</h3>\n\n            <label for=\"filterType\">Filter Type:</label>\n            <select\n                id=\"filterType\"\n                name=\"filterType\"\n                onChange={(evt) => {\n                    csound.setControlChannel(\"filterType\", evt.target.value);\n                }}\n            >\n                <option value=\"0\">None</option>\n                <option value=\"1\">Low Pass: 2 pole (-12dB oct)</option>\n                <option value=\"2\">Low Pass: 4 pole (-24dB oct)</option>\n            </select>\n\n            <input\n                type=\"range\"\n                min=\"20\"\n                max=\"10000\"\n                value={freq}\n                onInput={(evt) => {\n                    const val = evt.target.value;\n                    setFreq(val);\n                }}\n                onDoubleClick={(evt) => {\n                    setFreq(1000);\n                }}\n            />\n            <div style={{margin: \"auto\"}}>{freq} Hz</div>\n        </div>\n    );\n};\n\nconst PlayButtons = ({ csound }) => {\n    return (\n        <div className=\"buttonBox\" style={{ marginTop: \"30px\" }}>\n            <button\n                onClick={() =>\n                    csound.evaluateCode(\"schedule(1, 0, 2, cpsmidinn(48))\")\n                }\n            >\n                C3\n            </button>\n            <button\n                onClick={() =>\n                    csound.evaluateCode(\"schedule(1, 0, 2, cpsmidinn(60))\")\n                }\n            >\n                C4\n            </button>\n            <button\n                onClick={() =>\n                    csound.evaluateCode(\"schedule(1, 0, 2, cpsmidinn(72))\")\n                }\n            >\n                C5\n            </button>\n            <button\n                onClick={() => {\n                    csound.setControlChannel(\"run\", 1);\n                    csound.readScore(\"i2 0 1\");\n                }}\n            >\n                Start Note Gen \n            </button>\n            <button\n                onClick={() =>\n                    csound.setControlChannel(\"run\", 0)\n                }\n            >\n                Stop Note Gen \n            </button>\n        </div>\n    );\n};\n\nconst orc = `\nsr=48000\nksmps=128\n0dbfs=1\nnchnls=2\n\ninstr 1\n    ifreq = p4 \n\n    print ifreq\n\n    ;; SOURCE\n    asig = vco2(1, ifreq, chnget:i(\"waveform\"))\n\n\n    ;; FILTER \n    kfiltType = chnget:i(\"filterType\")\n    kcutoff = chnget:k(\"filterCutoff\")\n    kcutoff = port(kcutoff, 0.1, chnget:i(\"filterCutoff\"))\n    if (kfiltType == 1)  then\n        asig = zdf_2pole(asig, kcutoff, 0.5)\n    elseif (kfiltType == 2) then\n        asig = zdf_ladder(asig, kcutoff, 0.5)\n    endif\n\n    ;; DECLICK ENVELOPE\n    asig *= linen:a(ampdbfs(-12), 0.01, p3, 0.01)\n\n    out(asig, asig)\nendin\n\ninstr 2\n    irun = chnget:i(\"run\")\n    ivals[] = fillarray(0,2,4,5,7,9,11)\n    inn = ivals[int(random:i(0,7))]\n    if(irun == 1) then\n        schedule(1, 0, 1, cpsmidinn(48 + inn))\n        schedule(p1, 1, 0)\n    endif\nendin\n`;\n\nconst Subtractive = ({ csound }) => {\n    const [started, setStarted] = useState(false);\n\n    const startCsound = () => {\n        csound.setOption(\"-+msg_color=false\");\n        csound.compileOrc(orc);\n        csound.start();\n        csound.audioContext.resume();\n        setStarted(true);\n    };\n\n    useEffect(() => {\n        return () => {\n            csound.reset();\n        };\n    }, [csound]);\n\n    return (\n        <div className=\"container\">\n            <h2>Subtractive Synthesis</h2>\n            {started ? (\n                <>\n                    <div className=\"subGrid\">\n                        <SourcePanel csound={csound} />\n                        <FilterPanel csound={csound} />\n                    </div>\n                    <PlayButtons csound={csound} />\n                    <div style={{height: \"180px\"}}>\n                        <SpectralAnalyzer csound={csound} />\n                    </div>\n                </>\n            ) : (\n                <button onClick={startCsound}>Start Project</button>\n            )}\n        </div>\n    );\n};\n\nexport default Subtractive;\n","import React from \"react\";\n\nconst Main = () => {\n\n    return (\n        <div className=\"container\">\n            <div className=\"content\">\n            <h2>Home Page</h2>\n            <p>Welcome to the Learn Synthesis home page!  This site contains \n               web-based tools for learning sound synthesis built using <a href=\"https://csound.com\">Csound</a>. \n            </p>\n            <p>Please use the navigation links to explore the tools for learning synthesis techniques.</p>\n            <p>&nbsp;</p>\n            <p>\n                <i>This site is currently under construction and is being used as part of the course IGME 670 at the Rochester Institute of Technology's School of Interactive Games and Media.\n                This site will continue to evolve over time as a tool for teaching and self-study of sound synthesis. \n                Please direct any questions and comments to <a href=\"mailto:stevenyi@gmail.com\">Steven Yi</a>.\n                </i>\n            </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Main;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport CsoundObj from \"@kunstmusik/csound\";\nimport Additive from \"./Additive\";\nimport Subtractive from \"./Subtractive\";\nimport Main from \"./Main\";\nimport { Switch, Route } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = () => {\n    return (\n        <nav>\n            <ul>\n                <li>\n                    <Link to=\"/\"><strong>Learn Synthesis</strong></Link>\n                </li>\n                <li>\n                    <Link to=\"/additive\">Additive Synthesis</Link>\n                </li>\n                <li>\n                    <Link to=\"/subtractive\">Subtractive Synthesis</Link>\n                </li>\n            </ul>\n        </nav>\n    );\n};\n\nfunction App() {\n    const [csound, setCsound] = useState(null);\n    useEffect(() => {\n        if (csound == null) {\n            CsoundObj.initialize().then(() => {\n                const cs = new CsoundObj();\n                setCsound(cs);\n            });\n        }\n    }, [csound]);\n\n    return (\n        <div className=\"App\">\n          <Navigation/>\n            {csound == null ? (\n                <header className=\"App-header\">\n                    <p>Loading...</p>\n                </header>\n            ) : (\n                <Switch>\n                    <Route path=\"/additive\">\n                        <Additive csound={csound} />\n                    </Route>\n                    <Route path=\"/subtractive\">\n                        <Subtractive csound={csound} />\n                    </Route>\n                    <Route path=\"/\">\n                        <Main />\n                    </Route>\n                </Switch>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n       <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}