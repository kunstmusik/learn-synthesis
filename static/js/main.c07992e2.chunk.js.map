{"version":3,"sources":["Additive/index.jsx","App.js","serviceWorker.js","index.js"],"names":["dbToAmp","db","Math","exp","log","Slider","csound","sliderNum","sliderChan","setControlChannel","key","type","min","max","defaultValue","onInput","evt","val","target","value","console","Additive","useState","started","setStarted","csSlider","curry","sliders","map","range","onClick","compileOrc","start","audioContext","resume","App","setCsound","useEffect","CsoundObj","initialize","then","cs","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uUAIMA,G,MAAU,SAACC,GACb,OAAOA,IAAO,GAAK,EAAIC,KAAKC,IAAIF,EAAKC,KAAKE,IAAI,IAAI,MAGhDC,EAAS,SAACC,EAAQC,GACpB,IAAMC,EAAU,cAAUD,GAG1B,OADAD,EAAOG,kBAAkBD,EAAY,GAErC,2BAAOE,IAAKF,EAAYG,KAAK,QAAQC,IAAI,MAAMC,IAAI,IAAIC,aAAa,MAChEC,QAAS,SAACC,GACN,IAAMC,EAAMD,EAAIE,OAAOC,MACvBC,QAAQhB,IAAIJ,EAAQiB,IACpBX,EAAOG,kBAAkBD,EAAYR,EAAQiB,QA+D1CI,EA1BE,SAAC,GAAc,IAAbf,EAAY,EAAZA,OAAY,EAEGgB,oBAAS,GAFZ,mBAEpBC,EAFoB,KAEXC,EAFW,KAWrBC,EAAWC,YAAMrB,EAANqB,CAAcpB,GACzBqB,EAAUC,YAAIH,EAAUI,YAAM,EAAE,KAEtC,OACI,6BACMN,EACEI,EAEA,4BAAQG,QAfA,WAChBxB,EAAOyB,WAnCN,+5BAoCDzB,EAAO0B,QACP1B,EAAO2B,aAAaC,SACpBV,GAAW,KAWH,mBC3CDW,MAzBf,WAAgB,IAAD,EACiBb,mBAAS,MAD1B,mBACJhB,EADI,KACI8B,EADJ,KAWX,OATAC,qBAAU,WACQ,MAAV/B,GACAgC,IAAUC,aAAaC,MAAK,WACxB,IAAMC,EAAK,IAAIH,IACfF,EAAUK,QAGnB,CAACnC,IAGA,yBAAKoC,UAAU,OACD,MAAVpC,EACC,4BAAQoC,UAAU,cACf,0CAIJ,kBAAC,EAAD,CAAUpC,OAAQA,MCZVqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.c07992e2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { range, map, curry} from \"ramda\";\nimport './index.css'\n\nconst dbToAmp = (db) => {\n    return db <= -60 ? 0 : Math.exp(db * Math.log(10)/20);\n}\n \nconst Slider = (csound, sliderNum) => {\n    const sliderChan = `harm${sliderNum}`;\n\n    csound.setControlChannel(sliderChan, 0)\n    return (\n    <input key={sliderChan} type=\"range\" min=\"-60\" max=\"0\" defaultValue=\"-60\"\n        onInput={(evt) => {\n            const val = evt.target.value;\n            console.log(dbToAmp(val))\n            csound.setControlChannel(sliderChan, dbToAmp(val))\n        }\n    }\n    />\n    );\n}\n\nconst orc = `\n0dbfs=1\nksmps=128\n\ninstr 1\n    ifreq = 200\n    asig = oscili(chnget:k(\"harm1\"), ifreq)\n    asig += oscili(chnget:k(\"harm2\"), ifreq * 2)\n    asig += oscili(chnget:k(\"harm3\"),ifreq * 3)\n    asig += oscili(chnget:k(\"harm4\"),ifreq * 4)\n    asig += oscili(chnget:k(\"harm5\"),ifreq * 5)\n    asig += oscili(chnget:k(\"harm6\"), ifreq * 6)\n    asig += oscili(chnget:k(\"harm7\"), ifreq * 7)\n    asig += oscili(chnget:k(\"harm8\"), ifreq * 8)\n    asig += oscili(chnget:k(\"harm9\"), ifreq * 9)\n    asig += oscili(chnget:k(\"harm10\"), ifreq * 10)\n    asig += oscili(chnget:k(\"harm11\"),ifreq * 11)\n    asig += oscili(chnget:k(\"harm12\"),ifreq * 12)\n    asig += oscili(chnget:k(\"harm13\"),ifreq * 13)\n    asig += oscili(chnget:k(\"harm14\"), ifreq * 14)\n    asig += oscili(chnget:k(\"harm15\"), ifreq * 15)\n    asig += oscili(chnget:k(\"harm16\"), ifreq * 16)\n\n    asig *= 1/16\n\n    out(asig, asig)\nendin\nschedule(1, 0, -1)\n`;\n\nconst Additive = ({csound}) => {\n\n    const [started, setStarted] = useState(false);\n\n    const startCsound = () => {\n        csound.compileOrc(orc);\n        csound.start(); \n        csound.audioContext.resume();\n        setStarted(true);\n    }\n\n    const csSlider = curry(Slider)(csound)\n    const sliders = map(csSlider, range(1,17));\n\n    return (\n        <div>\n            { started ? \n                sliders \n                :\n                <button onClick={startCsound}>Start Project</button>\n            }\n        </div>\n    )\n\n}\n\nexport default Additive;","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport CsoundObj from \"@kunstmusik/csound\";\nimport Additive from \"./Additive\";\n\nfunction App() {\n    const [csound, setCsound] = useState(null);\n    useEffect(() => {\n        if (csound == null) {\n            CsoundObj.initialize().then(() => {\n                const cs = new CsoundObj();\n                setCsound(cs);\n            });\n        }\n    }, [csound]);\n\n    return (\n        <div className=\"App\">\n          { csound == null ? \n            (<header className=\"App-header\">\n                <p>\n                  Loading... \n                </p>\n            </header>) :\n            <Additive csound={csound}/>\n          } \n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}